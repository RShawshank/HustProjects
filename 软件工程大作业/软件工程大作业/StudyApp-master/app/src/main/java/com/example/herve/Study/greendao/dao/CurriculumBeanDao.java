package com.example.herve.Study.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.herve.Study.bean.CurriculumBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRICULUM_BEAN".
*/
public class CurriculumBeanDao extends AbstractDao<CurriculumBean, Long> {

    public static final String TABLENAME = "CURRICULUM_BEAN";

    /**
     * Properties of entity CurriculumBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CurriculumId = new Property(0, Long.class, "curriculumId", true, "_id");
        public final static Property ResId = new Property(1, int.class, "resId", false, "RES_ID");
        public final static Property CurriculumName = new Property(2, String.class, "curriculumName", false, "CURRICULUM_NAME");
        public final static Property Teacher = new Property(3, String.class, "teacher", false, "TEACHER");
    }

    private Query<CurriculumBean> gradeBean_CurriculumBeansQuery;

    public CurriculumBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CurriculumBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRICULUM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: curriculumId
                "\"RES_ID\" INTEGER NOT NULL ," + // 1: resId
                "\"CURRICULUM_NAME\" TEXT," + // 2: curriculumName
                "\"TEACHER\" TEXT);"); // 3: teacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRICULUM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurriculumBean entity) {
        stmt.clearBindings();
 
        Long curriculumId = entity.getCurriculumId();
        if (curriculumId != null) {
            stmt.bindLong(1, curriculumId);
        }
        stmt.bindLong(2, entity.getResId());
 
        String curriculumName = entity.getCurriculumName();
        if (curriculumName != null) {
            stmt.bindString(3, curriculumName);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(4, teacher);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurriculumBean entity) {
        stmt.clearBindings();
 
        Long curriculumId = entity.getCurriculumId();
        if (curriculumId != null) {
            stmt.bindLong(1, curriculumId);
        }
        stmt.bindLong(2, entity.getResId());
 
        String curriculumName = entity.getCurriculumName();
        if (curriculumName != null) {
            stmt.bindString(3, curriculumName);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(4, teacher);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CurriculumBean readEntity(Cursor cursor, int offset) {
        CurriculumBean entity = new CurriculumBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // curriculumId
            cursor.getInt(offset + 1), // resId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curriculumName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // teacher
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurriculumBean entity, int offset) {
        entity.setCurriculumId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResId(cursor.getInt(offset + 1));
        entity.setCurriculumName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeacher(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurriculumBean entity, long rowId) {
        entity.setCurriculumId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurriculumBean entity) {
        if(entity != null) {
            return entity.getCurriculumId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurriculumBean entity) {
        return entity.getCurriculumId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "curriculumBeans" to-many relationship of GradeBean. */
    public List<CurriculumBean> _queryGradeBean_CurriculumBeans(Long curriculumId) {
        synchronized (this) {
            if (gradeBean_CurriculumBeansQuery == null) {
                QueryBuilder<CurriculumBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CurriculumId.eq(null));
                gradeBean_CurriculumBeansQuery = queryBuilder.build();
            }
        }
        Query<CurriculumBean> query = gradeBean_CurriculumBeansQuery.forCurrentThread();
        query.setParameter(0, curriculumId);
        return query.list();
    }

}

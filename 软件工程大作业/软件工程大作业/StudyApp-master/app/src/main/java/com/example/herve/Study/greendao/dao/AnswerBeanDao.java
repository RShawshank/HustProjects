package com.example.herve.Study.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.herve.Study.bean.AnswerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWER_BEAN".
*/
public class AnswerBeanDao extends AbstractDao<AnswerBean, Long> {

    public static final String TABLENAME = "ANSWER_BEAN";

    /**
     * Properties of entity AnswerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AnswerId = new Property(0, Long.class, "answerId", true, "_id");
        public final static Property Result = new Property(1, int.class, "result", false, "RESULT");
    }

    private DaoSession daoSession;

    private Query<AnswerBean> answerSheetBean_AnswerBeansQuery;

    public AnswerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AnswerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: answerId
                "\"RESULT\" INTEGER NOT NULL );"); // 1: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnswerBean entity) {
        stmt.clearBindings();
 
        Long answerId = entity.getAnswerId();
        if (answerId != null) {
            stmt.bindLong(1, answerId);
        }
        stmt.bindLong(2, entity.getResult());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnswerBean entity) {
        stmt.clearBindings();
 
        Long answerId = entity.getAnswerId();
        if (answerId != null) {
            stmt.bindLong(1, answerId);
        }
        stmt.bindLong(2, entity.getResult());
    }

    @Override
    protected final void attachEntity(AnswerBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AnswerBean readEntity(Cursor cursor, int offset) {
        AnswerBean entity = new AnswerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // answerId
            cursor.getInt(offset + 1) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnswerBean entity, int offset) {
        entity.setAnswerId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResult(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnswerBean entity, long rowId) {
        entity.setAnswerId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnswerBean entity) {
        if(entity != null) {
            return entity.getAnswerId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnswerBean entity) {
        return entity.getAnswerId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "answerBeans" to-many relationship of AnswerSheetBean. */
    public List<AnswerBean> _queryAnswerSheetBean_AnswerBeans(Long answerId) {
        synchronized (this) {
            if (answerSheetBean_AnswerBeansQuery == null) {
                QueryBuilder<AnswerBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AnswerId.eq(null));
                answerSheetBean_AnswerBeansQuery = queryBuilder.build();
            }
        }
        Query<AnswerBean> query = answerSheetBean_AnswerBeansQuery.forCurrentThread();
        query.setParameter(0, answerId);
        return query.list();
    }

}

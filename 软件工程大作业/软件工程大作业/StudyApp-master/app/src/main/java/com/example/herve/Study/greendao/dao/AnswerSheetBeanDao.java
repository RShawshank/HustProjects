package com.example.herve.Study.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.herve.Study.bean.AnswerSheetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWER_SHEET_BEAN".
*/
public class AnswerSheetBeanDao extends AbstractDao<AnswerSheetBean, Long> {

    public static final String TABLENAME = "ANSWER_SHEET_BEAN";

    /**
     * Properties of entity AnswerSheetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ExaminationPaperId = new Property(0, Long.class, "examinationPaperId", true, "_id");
        public final static Property Grade = new Property(1, String.class, "grade", false, "GRADE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Student = new Property(3, String.class, "student", false, "STUDENT");
        public final static Property PaperDifficulty = new Property(4, int.class, "paperDifficulty", false, "PAPER_DIFFICULTY");
        public final static Property PaperType = new Property(5, int.class, "paperType", false, "PAPER_TYPE");
        public final static Property TotalScore = new Property(6, int.class, "totalScore", false, "TOTAL_SCORE");
        public final static Property TotalPoints = new Property(7, int.class, "totalPoints", false, "TOTAL_POINTS");
    }

    private DaoSession daoSession;


    public AnswerSheetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AnswerSheetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWER_SHEET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: examinationPaperId
                "\"GRADE\" TEXT," + // 1: grade
                "\"AUTHOR\" TEXT," + // 2: author
                "\"STUDENT\" TEXT," + // 3: student
                "\"PAPER_DIFFICULTY\" INTEGER NOT NULL ," + // 4: paperDifficulty
                "\"PAPER_TYPE\" INTEGER NOT NULL ," + // 5: paperType
                "\"TOTAL_SCORE\" INTEGER NOT NULL ," + // 6: totalScore
                "\"TOTAL_POINTS\" INTEGER NOT NULL );"); // 7: totalPoints
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER_SHEET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnswerSheetBean entity) {
        stmt.clearBindings();
 
        Long examinationPaperId = entity.getExaminationPaperId();
        if (examinationPaperId != null) {
            stmt.bindLong(1, examinationPaperId);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(2, grade);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String student = entity.getStudent();
        if (student != null) {
            stmt.bindString(4, student);
        }
        stmt.bindLong(5, entity.getPaperDifficulty());
        stmt.bindLong(6, entity.getPaperType());
        stmt.bindLong(7, entity.getTotalScore());
        stmt.bindLong(8, entity.getTotalPoints());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnswerSheetBean entity) {
        stmt.clearBindings();
 
        Long examinationPaperId = entity.getExaminationPaperId();
        if (examinationPaperId != null) {
            stmt.bindLong(1, examinationPaperId);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(2, grade);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String student = entity.getStudent();
        if (student != null) {
            stmt.bindString(4, student);
        }
        stmt.bindLong(5, entity.getPaperDifficulty());
        stmt.bindLong(6, entity.getPaperType());
        stmt.bindLong(7, entity.getTotalScore());
        stmt.bindLong(8, entity.getTotalPoints());
    }

    @Override
    protected final void attachEntity(AnswerSheetBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AnswerSheetBean readEntity(Cursor cursor, int offset) {
        AnswerSheetBean entity = new AnswerSheetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // examinationPaperId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // grade
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // student
            cursor.getInt(offset + 4), // paperDifficulty
            cursor.getInt(offset + 5), // paperType
            cursor.getInt(offset + 6), // totalScore
            cursor.getInt(offset + 7) // totalPoints
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnswerSheetBean entity, int offset) {
        entity.setExaminationPaperId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrade(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStudent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPaperDifficulty(cursor.getInt(offset + 4));
        entity.setPaperType(cursor.getInt(offset + 5));
        entity.setTotalScore(cursor.getInt(offset + 6));
        entity.setTotalPoints(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnswerSheetBean entity, long rowId) {
        entity.setExaminationPaperId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnswerSheetBean entity) {
        if(entity != null) {
            return entity.getExaminationPaperId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnswerSheetBean entity) {
        return entity.getExaminationPaperId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.example.herve.Study.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.herve.Study.bean.QuestionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_BEAN".
*/
public class QuestionBeanDao extends AbstractDao<QuestionBean, Long> {

    public static final String TABLENAME = "QUESTION_BEAN";

    /**
     * Properties of entity QuestionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QuestionId = new Property(0, Long.class, "questionId", true, "_id");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property Solution = new Property(2, String.class, "solution", false, "SOLUTION");
        public final static Property AnswerKey = new Property(3, String.class, "answerKey", false, "ANSWER_KEY");
        public final static Property Score = new Property(4, int.class, "score", false, "SCORE");
        public final static Property Difficulty = new Property(5, int.class, "difficulty", false, "DIFFICULTY");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
    }

    private DaoSession daoSession;

    private Query<QuestionBean> examinationPaperBean_QuestionBeansQuery;

    public QuestionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: questionId
                "\"QUESTION\" TEXT," + // 1: question
                "\"SOLUTION\" TEXT," + // 2: solution
                "\"ANSWER_KEY\" TEXT," + // 3: answerKey
                "\"SCORE\" INTEGER NOT NULL ," + // 4: score
                "\"DIFFICULTY\" INTEGER NOT NULL ," + // 5: difficulty
                "\"TYPE\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(1, questionId);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(3, solution);
        }
 
        String answerKey = entity.getAnswerKey();
        if (answerKey != null) {
            stmt.bindString(4, answerKey);
        }
        stmt.bindLong(5, entity.getScore());
        stmt.bindLong(6, entity.getDifficulty());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(1, questionId);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(3, solution);
        }
 
        String answerKey = entity.getAnswerKey();
        if (answerKey != null) {
            stmt.bindString(4, answerKey);
        }
        stmt.bindLong(5, entity.getScore());
        stmt.bindLong(6, entity.getDifficulty());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void attachEntity(QuestionBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionBean readEntity(Cursor cursor, int offset) {
        QuestionBean entity = new QuestionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // questionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // solution
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answerKey
            cursor.getInt(offset + 4), // score
            cursor.getInt(offset + 5), // difficulty
            cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionBean entity, int offset) {
        entity.setQuestionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSolution(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswerKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScore(cursor.getInt(offset + 4));
        entity.setDifficulty(cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionBean entity, long rowId) {
        entity.setQuestionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionBean entity) {
        if(entity != null) {
            return entity.getQuestionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionBean entity) {
        return entity.getQuestionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questionBeans" to-many relationship of ExaminationPaperBean. */
    public List<QuestionBean> _queryExaminationPaperBean_QuestionBeans(Long questionId) {
        synchronized (this) {
            if (examinationPaperBean_QuestionBeansQuery == null) {
                QueryBuilder<QuestionBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                examinationPaperBean_QuestionBeansQuery = queryBuilder.build();
            }
        }
        Query<QuestionBean> query = examinationPaperBean_QuestionBeansQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

}

package com.example.herve.Study.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.herve.Study.bean.GradeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_BEAN".
*/
public class GradeBeanDao extends AbstractDao<GradeBean, Long> {

    public static final String TABLENAME = "GRADE_BEAN";

    /**
     * Properties of entity GradeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GradeId = new Property(0, Long.class, "gradeId", true, "_id");
        public final static Property GradeName = new Property(1, String.class, "gradeName", false, "GRADE_NAME");
        public final static Property HeadTeacher = new Property(2, String.class, "headTeacher", false, "HEAD_TEACHER");
    }

    private DaoSession daoSession;


    public GradeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GradeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: gradeId
                "\"GRADE_NAME\" TEXT," + // 1: gradeName
                "\"HEAD_TEACHER\" TEXT);"); // 2: headTeacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GradeBean entity) {
        stmt.clearBindings();
 
        Long gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindLong(1, gradeId);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(2, gradeName);
        }
 
        String headTeacher = entity.getHeadTeacher();
        if (headTeacher != null) {
            stmt.bindString(3, headTeacher);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GradeBean entity) {
        stmt.clearBindings();
 
        Long gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindLong(1, gradeId);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(2, gradeName);
        }
 
        String headTeacher = entity.getHeadTeacher();
        if (headTeacher != null) {
            stmt.bindString(3, headTeacher);
        }
    }

    @Override
    protected final void attachEntity(GradeBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GradeBean readEntity(Cursor cursor, int offset) {
        GradeBean entity = new GradeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gradeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gradeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // headTeacher
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GradeBean entity, int offset) {
        entity.setGradeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGradeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadTeacher(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GradeBean entity, long rowId) {
        entity.setGradeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GradeBean entity) {
        if(entity != null) {
            return entity.getGradeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GradeBean entity) {
        return entity.getGradeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
